
//Useful Functions
function dateParser(string){
  year=string.slice(0,4);
  month=string.slice(5,7);
  day=string.slice(8,10)
  return new Date(year,month,day);
}

//Note that data which is supplied should be in format of:[[date,open,close,high,low,volume],[date,open,close,high,low,volume]]
function arrMaker(arr,indicator) {
    let result=[];
    for(i in arr){
        if(indicator=="date"){
            result.unshift(arr[i][0])
        }
        else if(indicator=="open"){
            result.push(arr[i][1])
        }
        else if(indicator=="close"){
            result.push(arr[i][2])
        }
        else if(indicator=="high"){
            result.push(arr[i][3])
        }
        else if(indicator=="low"){
            result.push(arr[i][4])
        }
        else if(indicator=="volume"){
            result.push(arr[i][5])
        }
    }
    return result;
};


function maxFinder(arr){
    let max=0;
    for (i in arr){
        for(j=1;j<5;j++){
            if(Number(arr[i][j])>max){
                max=Number(arr[i][j]);
            }
        }
    }
    return max;
};

function minFinder(arr){
    let min=maxFinder(arr);
    for (i in arr){
        for(j=1;j<5;j++){
            if(Number(arr[i][j])<min){
                min=Number(arr[i][j]);
            }
        }
    }
    return min;
}

function xData(data,width){
  if (width<1000){
    return data.length/5
  }else{
    return data.length/10
  }
}

function layout(options,data,cb){
  let width=options.width;
  let height=options.height;
  let margin_left=width*0.05;
  let margin_top=height*0.05;
  let x_padding=height-margin_top ;
  let y_padding=width-margin_left;
  let y_tickSize=width*0.9;
  let x_tickSize=height*0.9;

  //Create the SVG Viewport
  var svg = d3.select("#fin-chart").append("svg")
                  .attr("width",width)
                  .attr("height",height)

  //y axis
  y_scale=d3.scaleLinear().range([height-margin_top,margin_top]);
  y_axis=y_scale.domain([minFinder(data)*0.95,maxFinder(data)*1.1])
  svg.append("g")
      .attr("transform",
        "translate("+y_padding+",0)")
       .call(d3.axisRight(y_axis).ticks(8));

  //x axis
  x_scale=d3.scaleBand().domain(arrMaker(data,"date")).range([margin_left,width-margin_left])
  x_axis=d3.axisBottom(x_scale)
    .tickValues(x_scale.domain().filter(function(d,i){ return !(i%parseInt(xData(data,width)))}));
      svg.append("g")
           .attr("transform","translate(0,"+x_padding+")")
            .call(x_axis);


  //y Grid Line
  svg.append("g")
      .attr("class", "grid")
      .attr("transform",
            "translate("+y_padding+",0)")
      .call(d3.axisLeft(y_scale)
          .ticks(8)
          .tickSize(y_tickSize)
          .tickFormat("")
                )
  //x Grid Line
  svg.append("g")
      .attr("class", "grid")
      .attr("transform","translate(0,"+x_padding+")")
      .call(x_axis
           .tickSize(-x_tickSize)
           .tickFormat("")
       )

       cb(x_scale,y_axis,svg,data,width)



}
//K

let options={
  width:1500,
  height:500,
}

function lineMaker(x_scale,y_scale,data,svg){
  x_scale.padding(0.5)
  let line_data=arrMaker(data,"close")
  var lineGenerator = d3.line()
      .x(function(d, i) {
          return x_scale(data[i][0]);
      })
      .y(function(d) {
          return y_scale(d);
      });

  var line = lineGenerator(line_data);
      svg.append('path')
      .attr('d', line)
          .attr("fill","none")
          .attr("stroke","blue")
}

function barMaker(x_scale,y_axis,svg,data,width){
  bar_width=width/data.length*0.5
  bar=svg.selectAll("rect")
          .data(data)
          .enter()
          .append("rect")
          .attr("width",bar_width)
          .attr("transform","translate("+bar_width/2+",0)")
          .attr("height",function(d,i){
              return Math.abs(y_axis(data[i][2])-y_axis(data[i][1]));
          })
          .attr("x",function(d,i){return x_scale(data[i][0])})
          .attr("y",function(d,i){
              if (data[i][2]>data[i][1]){
                return y_axis(data[i][2])
              }else{
                return y_axis(data[i][1])}
          })
          .style("fill",function(d,i){
            if (data[i][1]<data[i][2]){
              return "green"
            }else{
              return "red"
            }
          })

    high_line=svg.selectAll("lineGenerator")
            .data(data)
            .enter()
            .append("line")
            .attr("transform","translate("+bar_width+",0)")
            .attr("x1",function(d,i){return x_scale(data[i][0])})
            .attr("x2",function(d,i){return x_scale(data[i][0])})
            .attr("y1",function(d,i){ return y_scale(data[i][3])})
            .attr("y2",function(d,i){
              if (data[i][2]>data[i][1]){
                return y_axis(data[i][2])
              }else{
                return y_axis(data[i][1])}
            })
            .attr("fill","none")
            .attr("stroke","blue")
    low_line= svg.selectAll("lineGenerator")
            .data(data)
            .enter()
            .append("line")
            .attr("transform","translate("+bar_width+",0)")
            .attr("x1",function(d,i){return x_scale(data[i][0])})
            .attr("x2",function(d,i){return x_scale(data[i][0])})
            .attr("y1",function(d,i){ return y_scale(data[i][4])})
            .attr("y2",function(d,i){
              if (data[i][2]>data[i][1]){
                return y_axis(data[i][1])
              }else{
                return y_axis(data[i][2])}
            })
            .attr("fill","none")
            .attr("stroke","blue")
}

//To run line chart
layout(options,data,lineMaker)

//To run bar chart
layout(options,data,barMaker)
